version: "3.7"

services:
  schroedinger-backend:
    build: .
    restart: unless-stopped
    container_name: schroedinger-backend
    labels:
      - "docker-volume-backup.stop-during-backup=true"
    env_file:
      - ./configurations/.env
    ports:
      - ${SCHROEDINGER_BACKEND_PORT}:${SCHROEDINGER_BACKEND_PORT}
    depends_on:
      - schroedinger-postgresql
      - schroedinger-elasticsearch
      - schroedinger-rabbitmq
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    command:
      - /bin/bash
      - -c
      - |
        npm run index-prod
        npm run migrate-prod
        npm run server-prod
    healthcheck:
      test: ["CMD", "curl", "-f",  "http://localhost:${SCHROEDINGER_BACKEND_PORT}/health"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 120s

  schroedinger-socket:
    build: .
    restart: unless-stopped
    container_name: schroedinger-socket
    ports:
      - ${SCHROEDINGER_SOCKET_PORT}:${SCHROEDINGER_SOCKET_PORT}
    labels:
      - "docker-volume-backup.stop-during-backup=true"
    env_file:
      - ./configurations/.env
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - schroedinger-rabbitmq
    command:
      - /bin/bash
      - -c
      - |
        npm run socket-prod
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${SCHROEDINGER_SOCKET_PORT}/heatlh" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 120s

  schroedinger-worker:
    build: .
    restart: unless-stopped
    container_name: schroedinger-worker
    labels:
      - "docker-volume-backup.stop-during-backup=true"
    env_file:
      - ./configurations/.env
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - schroedinger-postgresql
      - schroedinger-elasticsearch
      - schroedinger-rabbitmq
    command:
      - /bin/bash
      - -c
      - |
        npm run worker-prod
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${SCHROEDINGER_SOCKET_PORT}/heatlh" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 120s

  schroedinger-cron:
    build: .
    restart: unless-stopped
    container_name: schroedinger-cron
    env_file:
      - ./configurations/.env
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - schroedinger-elasticsearch
    command:
      - /bin/bash
      - -c
      - |
        npm run cron-prod

  schroedinger-rabbitmq:
    restart: unless-stopped
    container_name: schroedinger-rabbitmq
    hostname: schroedinger-rabbitmq
    build: ./docker/rabbitmq
    env_file:
      - ./configurations/.env
    ports:
      - 15672:15672
    volumes:
      - schroedinger-rabbitmq-data:/var/lib/rabbitmq/mnesia/rabbit@schroedinger-rabbitmq
      - ./configurations/rabbitmq-definitions.json:/etc/rabbitmq/rabbitmq-definitions.json:ro
      - ./configurations/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:15672" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 120s

  schroedinger-postgresql:
    restart: unless-stopped
    container_name: schroedinger-postgresql
    image: registry.gitlab.com/schroedinger-survey/backend:postgresql
    command: postgres -c config_file=/tmp/postgresql.conf
    labels:
      - "docker-volume-backup.stop-during-backup=true"
    env_file:
      - ./configurations/.env
    volumes:
      - schroedinger-postgresql-data:/var/lib/postgresql/data/
      - ./configurations/postgresql.conf:/tmp/postgresql.conf
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 120s

  schroedinger-pgadmin4:
    restart: unless-stopped
    container_name: schroedinger-pgadmin4
    build: ./docker/pgadmin4
    labels:
      - "docker-volume-backup.stop-during-backup=true"
    ports:
      - 8080:8080
    env_file:
      - ./configurations/.env
    volumes:
      - schroedinger-pgadmin4-data:/var/lib/pgadmin
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - schroedinger-postgresql
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/login?next=%2F" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 120s

  schroedinger-elasticsearch:
    restart: unless-stopped
    container_name: schroedinger-elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:6.8.12
    env_file:
      - ./configurations/.env
    volumes:
      - schroedinger-elasticsearch-data:/usr/share/elasticsearch/data
      - ./configurations/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200/_cluster/health", "-u", "$ELASTIC_USERNAME:$ELASTIC_PASSWORD"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 120s

  schroedinger-kibana:
    restart: unless-stopped
    container_name: schroedinger-kibana
    image: docker.elastic.co/kibana/kibana:6.8.12
    env_file:
      - ./configurations/.env
    ports:
      - 5601:5601
    depends_on:
      - schroedinger-elasticsearch
    volumes:
      - ./configurations/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: [ "CMD", "curl", "f", "http://localhost:5601/app/home" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 120s

  schroedinger-metricbeat:
    restart: unless-stopped
    container_name: schroedinger-metricbeat
    image: docker.elastic.co/beats/metricbeat:6.8.12
    user: root
    env_file:
      - ./configurations/.env
    volumes:
      - ./configurations/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro
      - /proc:/hostfs/proc:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/hostfs:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    command: metricbeat -e -system.hostfs=/hostfs -strict.perms=false
    depends_on:
      - schroedinger-elasticsearch
      - schroedinger-backend
      - schroedinger-rabbitmq
      - schroedinger-pgadmin4
      - schroedinger-postgresql
      - schroedinger-worker
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5066"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 120s

  schroedinger-backup:
    container_name: schroedinger-backup
    image: futurice/docker-volume-backup:2.0.0
    restart: on-failure
    environment:
      BACKUP_CRON_EXPRESSION: "0 3 * * *"
    env_file:
      - ./configurations/.env
    volumes:
      - schroedinger-postgresql-data:/backup/schroedinger-postgresql-data:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

  schroedinger-autoheal:
    restart: always
    container_name: schroedinger-autoheal
    image: willfarrell/autoheal
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
      - AUTOHEAL_START_PERIOD=120
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  schroedinger-postgresql-data:
  schroedinger-pgadmin4-data:
  schroedinger-rabbitmq-data:
  schroedinger-elasticsearch-data:
